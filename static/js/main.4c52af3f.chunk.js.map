{"version":3,"sources":["serviceWorker.js","components/SerchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchField","searchChange","className","type","placeholder","onChange","Card","id","email","name","src","width","height","alt","CardList","robots","map","user","i","key","Scroll","props","style","overflowY","border","children","App","onSearchChange","event","setState","target","value","console","log","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCHSC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKC,UAAW,OACZ,2BACIA,UAAW,mCACXC,KAAK,SACLC,YAAa,gBACbC,SAAUJ,MCOXK,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACtB,OACI,kBAAC,WAAD,KACI,yBAAKP,UAAW,uDACZ,yBAAKQ,IAAG,+BAA0BH,EAA1B,YAAwCI,MAAO,IAAKC,OAAQ,IAAKC,IAAI,WAC7E,6BACI,4BAAKJ,GACL,2BAAID,OCYTM,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,kBAAC,WAAD,KAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CACAC,IAAKD,EACLX,GAAIQ,EAAOG,GAAGX,GACdE,KAAMM,EAAOG,GAAGT,KAChBD,MAAOO,EAAOG,GAAGV,aCF9BY,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBZ,OAAQ,UAChES,EAAMI,WC8CJC,E,YA7CX,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KAeVM,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAC7B,YAAa4B,EAAME,OAAOC,SAfzCC,QAAQC,IAAI,iDACZ,EAAKC,MAAQ,CACTnB,OAAQ,GACRf,YAAa,IALF,E,iFASE,IAAD,OAChBmC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACd,OAAQwB,OAC1CP,QAAQC,IAAI,yD,+BAQN,IAAD,EACyBO,KAAKN,MAA5BnB,EADF,EACEA,OAAQf,EADV,EACUA,YACfgC,QAAQC,IAAI,4CACZ,IAAMQ,EAAiB1B,EAAO2B,QAAO,SAAAC,GACjC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS7C,EAAY4C,kBAEzD,OAAK7B,EAAO+B,OAIJ,kBAAC,WAAD,KACI,yBAAK5C,UAAW,MACZ,2CACA,kBAAC,EAAD,CAAWD,aAAcuC,KAAKb,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUZ,OAAQ0B,OAR3B,2C,GA7BDM,a,MCElBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SN4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.4c52af3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className={'pa2'}>\r\n            <input\r\n                className={'pa3 ba b--green bg-lightest-blue'}\r\n                type=\"search\"\r\n                placeholder={'search robots'}\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React, {Fragment} from \"react\";\r\n\r\nconst Card = ({id, email, name}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className={'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'}>\r\n                <img src={`https://robohash.org/${id}?200x200`} width={200} height={200} alt=\"robots\"/>\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React, {Fragment} from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <Fragment>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (<Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component, Fragment} from \"react\";\r\nimport SearchBox from '../components/SerchBox'\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\"\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('Class: App, Function: constructor, Line: 14  ',);\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n        console.log('Class: App, Function: componentDidMount, Line: 23  ',);\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchField} = this.state\r\n        console.log('Class: App, Function: render, Line: 31  ',);\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        if (!robots.length) {\r\n            return <h1>Loading</h1>;\r\n        } else {\r\n            return (\r\n                <Fragment>\r\n                    <div className={'tc'}>\r\n                        <h1>RoboFriends</h1>\r\n                        <SearchBox searchChange={this.onSearchChange}/>\r\n                        <Scroll>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </Scroll>\r\n                    </div>\r\n                </Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}